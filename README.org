* Syncbox
** implement in c++
*** design
    Sun Sep 11 23:47:27 2016
    | class            | function                                                      |
    |------------------+---------------------------------------------------------------|
    | File             | write local file to and from server.Abstract                  |
    | LocalFile        | An implementation of File                                     |
    | FileDecorator    | An subclass of File, update version when write or read files. |
    |                  | use decorator pattern                                         |
    | Checker          | Abstract. check if client file is newer or older than server  |
    | TimeStampChecker | An implementation of Checker. Use time stamp to check         |
    |                  | But now just a stub                                           |
    | Version          | get or set file version on client and server side             |
    | PullTrans        | Implement the pull transction.                                |
    |                  | Strategy pattern used.                                        |
    | FileID           | Abstraction of file path on server side                       |
    | PathFileID       | Using relative path as file id on server side                 |
    Note:
    - File should not contains any member variable. since FileDecorator derived form it, but it will not use any of its member variable.
    - Don't know if some parameter should be passed to construtor or memeber function.
    - Decorator patter is powerful to add new functions to a class without modifying the class's implementation and the client code. Here when it is added, both PullTrans and LocalFile are not modified. Only test.cpp modified to create a FileDecorator object and pass to PullTrans.
    - The design is quite flexiable. You can add new subclass to File to change the storing method. You can add new subclass to Checker to implement new check algorithm.
    - there is no file id on client side. A string represents its full path is used.
    
    Problems:
    - Maybe LocalTimeStampChecker is not needed. just like LocalVersionChecker was not needed. TimeStamp class should be created like Version class, and LocalTimeStamp is a implementation of it for local server. The class is used to get and set time stamp for files on both server and client side. Then TimeStampChecker can use a TimeStamp object to get the timestamp info. Thus a LocalTimeStampChecker can be removed.
      Now LocalTimeStampChecker has two responsibility: get time stamp and compare time stamp. SRP rule is broken. But when I impelement it, I don't realize this.
    - the ~const string& from~ parameter of File::write is not needed. Because it can be abtained from the ~const FileID& id~ parameter and a global CLIENT_HOME_DIR. This rule applys to many other classes that use two parameters.
      #+begin_src C++ :includes <iostream>
using namespace std;
class File {
public:
    virtual int write(const string& from, const FileID& to) = 0;
    virtual int read(const FileID& from, const string& to) = 0;
};
      #+end_src

*** compile and run
    #+begin_src sh
    cd ANY_EMPTY_DIR
    cmake PATH_TO_SYNCBOX_SRC_DIR # Generates makefile. only need to do one time
    make # build
    ./aaa #run
    #+end_src

*** handle file deleteing and addind operation
    Add some return values for Checker::execute, SERVER_DELETED, CLIENT_DELETED, SERVER_ADDED, CLIENT_ADDED. Then the SyncTrans class can make use of these return value to do right thing.
    Add a new subclass to Checker to implement the new function, such AddedChecker, DeletedChecker, then combine it with VersionTimeStampChecker. Sounds good.

    Class File should add a new method to delete files, just name it 'delete'. Should accept a parameter specifing server or client side.

*** handle many files
    SyncFiles class. Sync a list of files. Provide many constructors to specifing files, such as a list of file names and directory names, a config file containing the file list.
    It also bind the relationship of file names between server side and client side.
    It accept the same File& and Checker& parameter as SyncTrans class.
** Thinking in design
   - When the module is small, it is easy to debug and modify some codes.
** Problems
   - SyncFiles depends on PathFildID. In its execute function.
   - {DONE}file deletion and adding is not handled correctly.
   - Should use one parameter(a FileID) to access to the local and server path for a file. All functions that accept two, such LocalFile's all function.  
     FileID should provide two method: getServerPath, getClientPath. Then it can be the only parameter for File, Version, Checker.
   - Add a general class to access file infos, such Version, time stamp, exist.
   - As more functions added, the original design start to have problem. Bad smell start to exists. And the code should be refactory. 

     Maybe this is the way how software is developed.
     At the begining, I think the design is quite good, it can adpat to any change. But now problems exists.
     A good architecture and bad architecture: the formar can construct a more adaptive acchitect.

** When ssh backend should be supported, the impelementation idea
   I should implement LocalFile, LocalVersion, LocalTImeStampChecker, LocalExistChecker's ssh version. That's the all difference.
   But the implementation seems not that easy. And there are efficiency problem. So I don't feel good.
   Add I found some differences that don't extracted when implementing Local*, that is get information of files, such as version(this is extracted already), timestamp, exists.

   Another problem is that for abstract class, the FileID is not easy to use. Because some implementation details are hide, but it is needed some where(such as the DestDir). *I think for such cases, a better way is using general API in general algorithm, but downcast to specific API in a real implementation*. One example: FileID maybe designed this way:
   #+begin_src C++ :includes <iostream>
   using namespace std;
   class FileID{
     virtual FileIDInfo getServerIDInfo();
     virtual FileIDInfo getClientIDInfo();
   };
   class FileIDInfo{
     virtual ~FileIDInfo()=0;
   };
   class SshFileIDInfo:public FileIDInfo{
     string getHost();
     string getIdFile();
     string getHome();
     string getRelativeName();
     string getUserName();
   };
   class LocalFileIDInfo:public FileIDInfo{
     string getRelativeName();
     string getHome();
     string getConfigHome();
   }
   #+end_src
   Use factory pattern to create a concrete FileID, then pass it to SyncTrans, which will pass it to Checker, File classes. Then in one concrete class such as LocalVersion, it will *downcast the FileIDInfo type to LocalFileIDInfo* to access getRelativeName() and getHome(); but for another concrete class such as SshVersion, it will *downcast the FileIDInfo type to SshFileIDInfo* to access getHost(), getIdFile() methods. Such kind of donwcast are safe and accepetable, because *a FileIDInfo in class SshVersion must be a SshFileIDInfo*, or there must be something wrong.

   Note: A FileID designed in such way act as a big global data. It makes things simple.

